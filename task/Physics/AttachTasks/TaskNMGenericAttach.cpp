// Filename   :	TaskNMGenericAttach.cpp
// Description:	

// --- Include Files ------------------------------------------------------------

// Rage headers:
#include "fragmentnm/messageparams.h"

// Game headers:
#include "Peds/Ped.h"
#include "Task/Physics/TaskAnimatedAttach.h"
#include "Task/Physics/AttachTasks/TaskNMGenericAttach.h"

// ------------------------------------------------------------------------------

AI_OPTIMISATIONS()

// Tunable parameters ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float CTaskNMGenericAttach::sf_muscleStiffnessLeftArm = 9.0f;
float CTaskNMGenericAttach::sf_muscleStiffnessRightArm = 9.0f;
float CTaskNMGenericAttach::sf_muscleStiffnessSpine = 9.0f;
float CTaskNMGenericAttach::sf_muscleStiffnessLeftLeg = 0.587f;
float CTaskNMGenericAttach::sf_muscleStiffnessRightLeg = 0.587f;
float CTaskNMGenericAttach::sf_stiffnessLeftArm = 9.0f;
float CTaskNMGenericAttach::sf_stiffnessRightArm = 9.0f;
float CTaskNMGenericAttach::sf_stiffnessSpine = 9.0f;
float CTaskNMGenericAttach::sf_stiffnessLeftLeg = 16.0f;
float CTaskNMGenericAttach::sf_stiffnessRightLeg = 16.0f;
float CTaskNMGenericAttach::sf_dampingLeftArm = 1.0f;
float CTaskNMGenericAttach::sf_dampingRightArm = 1.0f;
float CTaskNMGenericAttach::sf_dampingSpine = 1.0f;
float CTaskNMGenericAttach::sf_dampingLeftLeg = 0.2f;
float CTaskNMGenericAttach::sf_dampingRightLeg = 0.2f;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CTaskNMGenericAttach::CTaskNMGenericAttach(u32 nAttachFlags)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 : CTaskNMBehaviour(1000, 10000),
m_nAttachFlags(nAttachFlags),
m_bPedAttached(true)
{
	SetInternalTaskType(CTaskTypes::TASK_NM_GENERIC_ATTACH);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CTaskNMGenericAttach::~CTaskNMGenericAttach()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CTaskInfo* CTaskNMGenericAttach::CreateQueriableState() const
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	// this task is not networked 
	return rage_new CTaskInfo(); 
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
aiTask* CTaskNMGenericAttach::Copy() const
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	CTaskNMGenericAttach* pNewTask = rage_new CTaskNMGenericAttach(m_nAttachFlags);
	return pNewTask;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CTaskNMGenericAttach::StartBehaviour(CPed* /*pPed*/)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CTaskNMGenericAttach::ControlBehaviour(CPed* DEBUG_DRAW_ONLY(pPed))
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
#if DEBUG_DRAW
	// Make sure the function in CTaskAnimatedAttach gets called to visualise the attachment points and constraints every frame.
	taskAssert(dynamic_cast<CTaskAnimatedAttach*>(GetControlTask()->GetParent()));
	if(static_cast<CTaskAnimatedAttach*>(GetControlTask()->GetParent())->m_bEnableDebugDraw)
	{
		taskAssert(dynamic_cast<CTaskAnimatedAttach*>(GetControlTask()->GetParent()));
		static_cast<CTaskAnimatedAttach*>(GetControlTask()->GetParent())->DebugVisualise(pPed);
	}
#endif //DEBUG_DRAW
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CTaskNMGenericAttach::FinishConditions(CPed* pPed)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	// Don't exit if the ped has grabbed on.
	return (ProcessFinishConditionsBase(pPed, MONITOR_FALL, 0) && !m_bPedAttached);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CTaskNMGenericAttach::BehaviourSuccess(CPed* pPed, ARTFeedbackInterfaceGta* pFeedbackInterface)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	// Call the base class version to update feedback flags as necessary.
	CTaskNMBehaviour::BehaviourSuccess(pPed, pFeedbackInterface);

	if(QueryNmFeedbackMessage(pFeedbackInterface, NM_GRAB_R_FB) || QueryNmFeedbackMessage(pFeedbackInterface, NM_GRAB_L_FB))
	{
		m_bPedAttached = true;
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CTaskNMGenericAttach::BehaviourFailure(CPed* pPed, ARTFeedbackInterfaceGta* pFeedbackInterface)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	// Call the base class version to update feedback flags as necessary.
	CTaskNMBehaviour::BehaviourFailure(pPed, pFeedbackInterface);

	if(QueryNmFeedbackMessage(pFeedbackInterface, NM_GRAB_R_FB) || QueryNmFeedbackMessage(pFeedbackInterface, NM_GRAB_L_FB))
	{
		if(m_bPedAttached)
		{
			m_bPedAttached = false;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool CTaskNMGenericAttach::ShouldAbort( const AbortPriority UNUSED_PARAM(iPriority), const aiEvent* UNUSED_PARAM(pEvent))
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	return true;
}