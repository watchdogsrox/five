/////////////////////////////////////////////////////////////////////////////////
//
// FILE    : VideoEditorInterface.h
// PURPOSE : Abstraction layer for accessing the systems underlying the video editor.
//
// AUTHOR  : james.strain
//
// Copyright (C) 1999-2013 Rockstar Games.  All Rights Reserved.
//
/////////////////////////////////////////////////////////////////////////////////
#include "control/replay/ReplaySettings.h"
#include "video/VideoPlaybackSettings.h"

#if defined( GTA_REPLAY ) && GTA_REPLAY

#ifndef VIDEO_EDITOR_INTERFACE_H_
#define VIDEO_EDITOR_INTERFACE_H_

// framework
#include "fwScene/stores/imposedTextureDictionary.h"
#include "streaming/streamingdefs.h"

// game
#include "control/replay/File/device_replay.h"
#include "frontend/VideoEditor/Core/ImposedImageHandler.h"
#include "frontend/VideoEditor/Core/VideoEditorProject.h"
#include "frontend/VideoEditor/Core/VideoProjectPlaybackController.h"
#include "frontend/VideoEditor/DataProviders/RawClipFileDataProvider.h"
#include "frontend/VideoEditor/Views/RawClipFileView.h"
#include "frontend/VideoEditor/DataProviders/VideoProjectFileDataProvider.h"
#include "frontend/VideoEditor/Views/VideoProjectFileView.h"
#include "frontend/VideoEditor/DataProviders/VideoFileDataProvider.h"
#include "frontend/VideoEditor/Views/VideoFileView.h"
#include "replaycoordinator/ReplayEditorParameters.h"

class CVideoEditorInterface
{
public: // declarations and variables
	static const u32 sc_nameBufferSize = 32;

	//! Bitfield flags representing tutorials seen. Max s32 currently (stored in profile settings)
	enum eEditorTutorialFlags : rage::s32
	{
		EDITOR_TUTORIAL_MARKER_EXTENTS = BIT(0),

		EDITOR_TUTORIAL_COUNT = 1
	};

public: // methods

	static void Init(unsigned initMode);
	static void Update();
	static void UpdatePreRender();
	static void Shutdown(unsigned shutdownMode);

	static void Activate();
	static bool IsActive();
	static void Deactivate();

	static bool GrabRawClipFileView( char const * const directory, CRawClipFileView *& out_view );
	static void ReleaseRawClipFileView( CRawClipFileView *& view );

	static bool GrabVideoProjectFileView( char const * const directory, CVideoProjectFileView *& out_view );
	static void ReleaseVideoProjectFileView( CVideoProjectFileView *& view );

#if defined(VIDEO_PLAYBACK_ENABLED) && VIDEO_PLAYBACK_ENABLED
	
	static bool GrabVideoFileView( char const * const directory, CVideoFileView *& out_view );
	static void ReleaseVideoFileView( CVideoFileView *& view );

#endif

	static bool CanUpdateHelpText();
	static bool HasSeenTutorial( eEditorTutorialFlags const tutorial );
	static void SetTutorialSeen( eEditorTutorialFlags const tutorial );
	static u32  GetTutorialDurationMs( eEditorTutorialFlags const tutorial );

	static u64 GetActiveUserId();

	// Recommended for debug UI use only
	inline static CImposedImageHandler& GetImageHandler() { return ms_imposedImageHandler; }

	static bool HasMinSpaceToSaveNewProject();
	static bool HasReachedMaxProjectLimit( CVideoProjectFileView const& projectFileView );
	static bool GenerateUniqueProjectName( char (&out_buffer)[ sc_nameBufferSize ], CVideoProjectFileView const& projectFileView );
	static bool GrabNewProject( char const * const name, CVideoEditorProject *& out_project );

	static bool StartLoadProject( char const * const path );
	static bool CanLoadProject();
	static bool IsLoadingProject();
	static bool HasLoadingProjectFailed();
	static u64 GetProjectLoadExtendedResultData();

	static bool GrabClipPreviewProject( u64 const ownerId, char const * const clipFileName, CVideoEditorProject *& out_previewProject );

	//! NOTE: Auto-generating a project makes it the active project. Be sure to clean it up afterwards!
	static bool StartAutogeneratingProject( CReplayEditorParameters::eAutoGenerationDuration const duration );
	static bool CanAutogenerateProject();
	static bool IsAutogeneratingProject();
	static bool IsAutogeneratedProjectReady();
	static bool HasAutogenerationFailed();

	static CVideoEditorProject* GetActiveProject();

	//! NOTE: Provider as a helper for when load/generate fails.
	static void ReleaseActiveProject();

	static bool	IsClipUsedInAnyProject( ClipUID const& uid );

	static bool IsCachingForPlayback();
	static bool IsPendingClipTransition();
	static bool IsPreviewingVideo();
	static bool IsPreviewingClip();
	static bool IsRenderingVideo();
	static bool IsPendingVideoFinalization();
	static bool IsPendingCleanup();
	static bool HasVideoRenderErrored();
	static char const * GetVideoRenderErrorLngKey();
	static bool HasVideoRenderSuspended();
	static bool HasVideoRenderBeenConstrained();
	static bool IsRenderingPaused();

	static bool ShouldShowLoadingScreen();
	static bool ShouldShowProcessingText();	
	static bool HasClipLoadFailed();

	static void PlayClipPreview( u32 clipIndex, bool const isEditing );
	static void PlayProjectPreview();
	static CVideoProjectPlaybackController& GetPlaybackController();

	//! NOTE: Synchronous as is used for debug interface. Will block until async actions complete
	static bool AutogenerateAndBakeProject( CReplayEditorParameters::eAutoGenerationDuration const duration );

	static bool IsSpaceAvailableToBake( float const c_durationMs, size_t& out_sizeBytesRequired, size_t& out_sizeBytesAvailable );
	static bool StartBakeProject( char const * const outputName );
	static void UpdateBakeProject();
	static void PauseBake();
	static void ResumeBake();
	static void KillPlaybackOrBake(bool userCancelled = true);
	static void CleanupPlayback();

	static void ReleaseProject( CVideoEditorProject *& project );

private: // declarations and variables
	enum eProjectGenerateState
	{
		PROJ_GEN_INVALID,
		PROJ_GEN_PENDING,
		PROJ_GEN_FAILED,
		PROJ_GEN_LOADED
	};

	static CImposedImageHandler				ms_imposedImageHandler;
	static CRawClipFileDataProvider			ms_rawClipProvider;
	static CRawClipFileView					ms_rawClipView;
	static CVideoProjectFileDataProvider	ms_videoProjectProvider;
	static CVideoProjectFileView			ms_videoProjectView;
#if defined(VIDEO_PLAYBACK_ENABLED) && VIDEO_PLAYBACK_ENABLED
	static CVideoFileDataProvider			ms_videoProvider;
	static CVideoFileView					ms_videoView;
#endif

	static CVideoEditorProject				ms_activeProject;
	static CVideoProjectPlaybackController  ms_playbackController;
	static bool								ms_isInAutogeneratedBake;
	static eProjectGenerateState			ms_projectGenState;

private: // methods
	static bool canUpdate();
	static bool canUpdatePreRender();

	static bool canPreviewOrBakeProject();

	static void cleanupClipViewInternal();
	static void cleanupProjectViewInternal();
	static void cleanupVideoViewInternal();
	static void cleanupActiveProjectInternal();
};

#endif // VIDEO_EDITOR_INTERFACE_H_

#endif // defined( GTA_REPLAY ) && GTA_REPLAY
